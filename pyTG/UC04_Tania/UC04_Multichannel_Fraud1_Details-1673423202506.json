{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 11,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T03:02:05.215Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"xm6qO3B9qLjCL0uGYz1X\" version=\"20.8.3\" type=\"embed\"><diagram id=\"9iFmse4Kr2XzyWF2zgJO\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_36",
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 0,
        "y": 0
      },
      "id": 36,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 3,
        "y": 0
      },
      "id": 42,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<h1 style=\"text-align:left;margin-top:1em;margin-bottom:0.5em\"> Details</h1>\n<hr style=\"height:1px;background-color:#ffffff; text-align:right;\">",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.2",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 7,
        "y": 0
      },
      "id": 20,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let atm_amounts = []\nlet mob_amounts = []\nlet ibank_amounts = []\n\ndata.series.map((s) => {\n  atm_amounts = s.fields.find((f) => f.name === 'ATM_Trx_Amount (sum)').values.buffer\n  mob_amounts = s.fields.find((f) => f.name === 'Mobile_Trx_Amount (sum)').values.buffer\n  ibank_amounts = s.fields.find((f) => f.name === 'IBank_Trx_Amount (sum)').values.buffer\n})\n\nreturn {\n  backgroundColor: \"#111217\",\n  tooltip: {\n    trigger: 'item'\n  },\n  legend: {\n    orient: 'vertical',\n    right: 30,\n    top: 20,\n    bottom: 20,\n    data: [\n      'ATM',\n      'Mobile App',\n      'Internet Banking'\n    ]\n  },\n  toolbox: {\n    show: true,\n    feature: {\n      mark: { show: true },\n      dataView: { show: true, readOnly: false },\n      restore: { show: true },\n      saveAsImage: { show: true }\n    }\n  },\n  series: [\n    {\n      name: 'Channel',\n      type: 'pie',\n      radius: [15, 100],\n      center: ['40%', '50%'],\n      roseType: 'area',\n      itemStyle: {\n        borderRadius: 5\n      },\n      label: {\n        formatter: '{b|{b}} {per|({d}%)}',\n        rich: {\n          b: {\n            color: '#ffffff',\n            fontSize: 12,\n            fontWeight: 'bold'\n          },\n          per: {\n            color: '#ffffff',\n            fontSize: 12\n          }\n        }\n      },\n      data: [\n        { value: atm_amounts, name: 'ATM' },\n        { value: mob_amounts, name: 'Mobile App' },\n        { value: ibank_amounts, name: 'Internet Banking' }\n      ]\n    }\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID, ATM_Trx_Amount, Mobile_Trx_Amount, IBank_Trx_Amount FROM uc04_data.results \r\nWHERE  Account_Receiver IN ($Filter_Receiver) AND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Distribution of Transaction Amount by Channel",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "ATM_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Account_Receiver": {
                "aggregations": [],
                "operation": "groupby"
              },
              "IBank_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Mobile_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyIDR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 0
      },
      "id": 12,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, ATM_Trx_Amount, Mobile_Trx_Amount, IBank_Trx_Amount FROM uc04_data.results WHERE Account_Receiver IN ($Filter_Receiver)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Total Transaction Amount",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "ATM_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Account_Receiver": {
                "aggregations": [],
                "operation": "groupby"
              },
              "IBank_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Mobile_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              }
            }
          }
        },
        {
          "id": "calculateField",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "ATM_Trx_Amount (sum)": true,
              "Account_Receiver": true,
              "IBank_Trx_Amount (sum)": true,
              "Mobile_Trx_Amount (sum)": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 3
      },
      "id": 32,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^Total$/",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, COUNT(DISTINCT(ATM_Trx_ID)), COUNT(DISTINCT(IBank_Trx_ID)), COUNT(DISTINCT(Mobile_Trx_ID)) FROM uc04_data.results WHERE Account_Receiver IN ($Filter_Receiver) ",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "ATM_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "IBank_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "Mobile_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Total Transaction Frequency",
      "transformations": [
        {
          "id": "calculateField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "gridPos": {
        "h": 14,
        "w": 7,
        "x": 0,
        "y": 4
      },
      "id": 10,
      "options": {
        "content": "<div style=\"text-align:center; font-family:sans-serif; display:table-cell; vertical-align:middle;\">\r\n  {{#if (eq Gender \"Female\")}}\r\n  <img src=\"https://raw.githubusercontent.com/tania21ciu/Web_Image/main/woman%20(1).png\"\r\n    width=\"180\" height=\"180\" style=\"border-radius:50%;\"></img>\r\n  {{/if}}\r\n  {{#if (eq Gender \"Male\")}}\r\n  <img src=\"https://raw.githubusercontent.com/tania21ciu/Web_Image/main/man%20(3).png\"\r\n    width=\"180\" height=\"180\" style=\"border-radius:50%;\"></img>\r\n  {{/if}}\r\n\r\n  <h2 style=\"margin:20px; color:white\">{{Full_Name}}</h2>\r\n  <h5 style=\"color:white\"> Born in {{Date_of_Birth}} |\r\n    <i class=\"fa fa-envelope\"><a style=\"font-family:sans-serif; color:white\"> {{Email_Address}}</p></i>\r\n  </h5>\r\n  <hr style=\"margin: 1rem; height:2px;border-width:0;color:gray;background-color:#caf0f8\">\r\n  <table style=\"margin:20px; border:none;\" width=\"93.5%\">\r\n    <tbody>\r\n      <tr>\r\n        <td\r\n          style=\"color:white; border:10px green; padding:8px 15px 8px 15px; text-align:center; border-radius: 50px; box-shadow: 3px 3px 3px #00b4d8;\">\r\n          <h6>Account ID<br>\r\n            <hr style=\"height:1px; background-color:white;\">{{Account_ID}}\r\n        </td>\r\n        <td\r\n          style=\"color:white; border:none; padding:8px 15px 8px 15px; text-align:center; border-radius: 50px; box-shadow: 3px 3px 3px #90e0ef;\">\r\n          <h6> Customer ID <br>\r\n            <hr style=\"height:1px; background-color:white;\">{{Customer_ID}}\r\n        </td>\r\n        <td\r\n          style=\"color:white; border:none; padding:8px 15px 8px 15px; text-align:center; border-radius: 50px; box-shadow: 3px 3px 3px #caf0f8;\">\r\n          <h6>KTP ID <br>\r\n            <hr style=\"height:1px; background-color:white;\">{{KTP_ID}}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>",
        "defaultContent": "",
        "editor": {
          "format": "auto",
          "height": 400,
          "language": "markdown"
        },
        "everyRow": true
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT * FROM uc04_data.account_details WHERE Account_ID IN ($Filter_Receiver)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "*",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "account_details",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Account Receiver Details",
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "title": "detail sender",
              "url": "http://localhost:3000/d/oWvtV0hVz/uc04_multichannel_fraud1_details?orgId=1&var-Filter_Receiver=DCA111103&from=1673341136118&to=1673362736118&var-Filter_Sender=All&var-Filter_TransactionID=All&viewPanel=50"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 6
      },
      "id": 30,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, COUNT(DISTINCT(Account_Sender)) FROM uc04_data.results WHERE Account_Receiver IN ($Filter_Receiver)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Total Sender Account",
      "transformations": [],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Total_Transaction"
            },
            "properties": [
              {
                "id": "unit",
                "value": "currencyIDR"
              },
              {
                "id": "custom.displayMode",
                "value": "basic"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 17,
        "x": 7,
        "y": 10
      },
      "id": 22,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Total_Transaction"
          }
        ]
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Anomaly_Datetime, Account_Receiver, Account_Sender, ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID, Total_Transaction FROM uc04_data.results WHERE Account_Receiver IN ($Filter_Receiver)\r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Anomaly_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Total_Transaction",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Multi-Channel Transaction Conducted By Receiver",
      "transformations": [],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 18
      },
      "id": 50,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT DISTINCT(uc04_data.account_details.Account_ID), uc04_data.account_details.Customer_ID, uc04_data.account_details.KTP_ID, uc04_data.account_details.Full_Name, uc04_data.account_details.Date_of_Birth, uc04_data.account_details.Gender, uc04_data.account_details.Email_Address FROM uc04_data.account_details\r\nINNER JOIN uc04_data.results ON uc04_data.account_details.Account_ID=uc04_data.results.Account_Sender\r\nWHERE uc04_data.account_details.Account_ID IN ($Filter_Sender) AND uc04_data.results.Account_Receiver IN ($Filter_Receiver);",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Customer_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "KTP_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Full_Name",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Date_of_Birth",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Gender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Email_Address",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "account_details",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Detail Account Sender",
      "type": "table"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T07:23:50.425Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"vdPAzu-BCZ-KgfBuWJAO\" version=\"20.8.3\" type=\"embed\"><diagram id=\"6lsSk-Vuj8_XFEFRmIrD\" name=\"Page-1\">jZNNU8MgEIZ/DfcmVNMebWz10lMdPWPYBEbCZihtEn+9UMiXHWfMIcM++wG7LxCa192LYY04IgdF0hXvCH0maZptVu7vQR/AOnsIoDKSB5RM4CS/IcKYV10kh/Mi0CIqK5slLFBrKOyCMWOwXYaVqJa7NqyCO3AqmLqnH5JbEegmzSb+CrISw87J4zZ4ajYEx07OgnFsZ1XpntDcINqwqrsclJ/dMJeQd/jDOx7MgLb/SaBpyLgydYnNPb0dHcgFc7NT8ZS2H1o3eNEcfHZC6K4V0sKpYYX3tk5rx4StVXSXUqkcFRpna9QuaHe2Br/GqVEfhNpGiX3/N/vAaqn85XgHw5lmEQ+1SEoPt28sOPNkRVl++kL3s4jjuYKx0P0eurusgDVY07uQ6KVRpn5ptpPoyXaQUswUX0fG4kWrxsqTFm4R5RjMSfabb/Z26P4H</diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_44",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 22
      },
      "id": 44,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T00:56:11.056Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" version=\"20.8.3\" etag=\"y5z4JIaFItSdajSIwl4M\" type=\"embed\"><diagram id=\"VcluPDKnhoNfNNdJ9F82\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_40",
      "gridPos": {
        "h": 9,
        "w": 3,
        "x": 0,
        "y": 25
      },
      "id": 40,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "gridPos": {
        "h": 9,
        "w": 8,
        "x": 3,
        "y": 25
      },
      "id": 24,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let atm_amounts = []\nlet atm_datetime = []\nlet ibank_amounts = []\n\ndata.series.map((s) => {\n  atm_amounts = s.fields.find((f) => f.name === 'ATM_Trx_Amount (mean)').values.buffer\n  atm_datetime = s.fields.find((f) => f.name === 'ATM_Trx_Datetime').values.buffer\n})\n\n\nreturn {\n  backgroundColor: \"#111217\",\n  color: ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['ATM Transaction Amount']\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: atm_datetime\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'ATM Transaction Amount',\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(128, 255, 165)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(1, 191, 236)'\n          }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: atm_amounts\n    },\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT ATM_Trx_Datetime, ATM_Trx_Amount FROM uc04_data.results WHERE ATM_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver)\r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Average ATM Transaction Amount over Time",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "ATM_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "ATM_Trx_Amount": {
                "aggregations": [
                  "mean"
                ],
                "operation": "aggregate"
              },
              "ATM_Trx_Datetime": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "filterable": false,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "ATM_Trx_Amount"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "lcd-gauge"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ATM_Trx_Datetime"
            },
            "properties": [
              {
                "id": "custom.width"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 13,
        "x": 11,
        "y": 25
      },
      "id": 2,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "ATM_Trx_Amount"
          }
        ]
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, Account_Sender, ATM_Trx_ID, ATM_Trx_Datetime, ATM_Trx_Amount FROM uc04_data.results WHERE ATM_Trx_Amount > 0 AND  Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))\r\nGROUP BY  ATM_Trx_ID",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50,
            "whereJsonTree": {
              "children1": [],
              "id": "b89bbb99-89ab-4cde-b012-31859adf0a1c",
              "type": "group"
            }
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Details of ATM Transaction",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "ATM_Trx_Amount"
              }
            ]
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T07:23:08.802Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"zKGS8KFFPnOr3Roz9YkN\" version=\"20.8.3\" type=\"embed\"><diagram id=\"ZeERkEPcQzdrc1ojiNZQ\" name=\"Page-1\">jVNNc4MgEP013iOkTbzGxvaSU2baM5VVmCLrEBK1v74Q8KuZztSDw763u7DvQULzpn81rBUn5KASsuF9Ql8SQnb7jft7YAjAdvcUgNpIHqB0Bs7yGyIY6+qr5HBZJVpEZWW7BkvUGkq7wpgx2K3TKlTrXVtWwwNwLpl6RD8ktyKge7Kb8TeQtRh3Tp+zwDRsTI6TXATj2C260mNCc4Now6rpc1Beu1GXUFf8wU4HM6DtfwooCRU3pq5xuBN+Sjco2eSCOflUPKgdxukNXjUH3yBN6KET0sK5ZaVnO2e3w4RtVKQrqVSOCo2LNWqXdLhYg1+TcNQnobbRZS/BPS5YI5W/H+9gONMswmOvhNDi/k0NF8w2y0hVOeZRjqjQDYyF/rfu7r4CNmDN4FIiS6NTwzrsZt/TbHRTLEzfRozFu1ZPnWc73CI6Moaz83du8Xzo8Qc=</diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_48",
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 34
      },
      "id": 48,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T00:49:33.943Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"1fnfNDHTl9WCnTpAbkS5\" version=\"20.8.3\" type=\"embed\"><diagram id=\"YeM2FD98rJKu4zMoST-6\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_34",
      "gridPos": {
        "h": 8,
        "w": 3,
        "x": 0,
        "y": 38
      },
      "id": 34,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 3,
        "y": 38
      },
      "id": 26,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let mobile_amounts = []\nlet mobile_datetime = []\n\ndata.series.map((s) => {\n  mobile_amounts = s.fields.find((f) => f.name === 'Mobile_Trx_Amount (mean)').values.buffer\n  mobile_datetime = s.fields.find((f) => f.name === 'Mobile_Trx_Datetime').values.buffer\n})\n\n\nreturn {\n  backgroundColor: \"#111217\",\n  color: ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['Mobile Transaction Amount']\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: mobile_datetime\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Mobile Transaction Amount',\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(128, 255, 165)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(34,139,34)'\n          }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: mobile_amounts\n    },\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Mobile_Trx_Datetime, Mobile_Trx_Amount FROM uc04_data.results WHERE Mobile_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver)\r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Average Mobile Banking Transaction Amount over Time",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "field": "Mobile_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "Mobile_Trx_Amount": {
                "aggregations": [
                  "mean"
                ],
                "operation": "aggregate"
              },
              "Mobile_Trx_Datetime": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Mobile_Trx_Amount"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "lcd-gauge"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 13,
        "x": 11,
        "y": 38
      },
      "id": 4,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Mobile_Trx_Amount"
          }
        ]
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, Account_Sender, Mobile_Trx_ID, Mobile_Trx_Datetime, Mobile_Trx_Amount FROM uc04_data.results WHERE Mobile_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))\r\nGROUP BY Mobile_Trx_ID",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Details of Mobile Application Transaction",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "Mobile_Trx_Amount"
              }
            ]
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T07:22:10.926Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"x7FTPwU0c78Hp2qAUHxJ\" version=\"20.8.3\" type=\"embed\"><diagram id=\"nkwpfI3Z-7y9179mdOkH\" name=\"Page-1\">jZPLbsMgEEW/hn1s0jy2cZN2024itWtqJgYFMxYhsd2vLwTwo1GlemF5zjyAezGhRd29GNaIN+SgSL7gHaHPJM/Xm4V7e9AHsFw/BVAZyQPKRnCU3xBh7KuuksNlVmgRlZXNHJaoNZR2xpgx2M7LTqjmqzasggdwLJl6pJ+SWxHoJl+P/BVkJdLK2WobMjVLxfEkF8E4tpOpdE9oYRBt+Kq7ApTXLukS+g5/ZIeNGdD2Pw00Dx03pq7xcO9gv5g+S105XgjmJFRxs7ZPChi8ag5+SEborhXSwrFhpc+2znLHhK1VTJ+kUgUqNC7WqF3R7mINngfxqC9CbaPTXoZ7fGC1VP6OfIDhTLOI0yyS08P9GQZOMifO+WrhMo+SRJVuYCx0v7V3dxawBmt6VxKzNLrVz8N29D7bJkfFxPhlZCzet2qYPFriPqIrKRzdv+cmvxDd/wA=</diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_46",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 46
      },
      "id": 46,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T00:48:37.548Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" version=\"20.8.3\" etag=\"gs7No0XlYNsIMug971t8\" type=\"embed\"><diagram id=\"6A3sm9AgLKuXU-aac3R4\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_38",
      "gridPos": {
        "h": 9,
        "w": 3,
        "x": 0,
        "y": 49
      },
      "id": 38,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 3,
        "y": 49
      },
      "id": 28,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let ibank_datetime = []\nlet ibank_amounts = []\n\ndata.series.map((s) => {\n  ibank_amounts = s.fields.find((f) => f.name === 'IBank_Trx_Amount (mean)').values.buffer\n  ibank_datetime = s.fields.find((f) => f.name === 'IBank_Trx_Datetime').values.buffer\n})\n\n\nreturn {\n  backgroundColor: \"#111217\",\n  color: ['#FFBF00'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['Internet Banking Transaction Amount']\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: ibank_datetime\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Internet Banking Transaction Amount',\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(255,255,204)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(255, 191, 0)'\n          }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: ibank_amounts\n    },\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT IBank_Trx_Datetime, IBank_Trx_Amount FROM uc04_data.results WHERE IBank_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))\r\n",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Average Internet Transaction Amount over Time",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "field": "IBank_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "IBank_Trx_Amount": {
                "aggregations": [
                  "mean"
                ],
                "operation": "aggregate"
              },
              "IBank_Trx_Datetime": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "Av4SrO24z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "IBank_Trx_Amount"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "lcd-gauge"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 13,
        "x": 11,
        "y": 49
      },
      "id": 6,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, Account_Sender, IBank_Trx_ID, IBank_Trx_Datetime, IBank_Trx_Amount FROM uc04_data.results WHERE IBank_Trx_Amount > 0 AND  Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender) \r\nAND (ATM_Trx_ID IN ($Filter_TransactionID) OR Mobile_Trx_ID IN ($Filter_TransactionID) OR IBank_Trx_ID IN ($Filter_TransactionID))\r\nGROUP BY IBank_Trx_ID",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Details of Internet Banking Transaction",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "IBank_Trx_Amount"
              }
            ]
          }
        }
      ],
      "transparent": true,
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "DCA111103",
          "value": "DCA111103"
        },
        "datasource": {
          "type": "mysql",
          "uid": "Av4SrO24z"
        },
        "definition": "SELECT Account_Receiver FROM uc04_data.results",
        "description": "",
        "hide": 2,
        "includeAll": true,
        "label": "Account Receiver",
        "multi": true,
        "name": "Filter_Receiver",
        "options": [],
        "query": "SELECT Account_Receiver FROM uc04_data.results",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "DCA111109",
          "value": "DCA111109"
        },
        "datasource": {
          "type": "mysql",
          "uid": "Av4SrO24z"
        },
        "definition": "SELECT Account_Sender FROM uc04_data.results",
        "hide": 0,
        "includeAll": true,
        "label": "Account Sender",
        "multi": true,
        "name": "Filter_Sender",
        "options": [],
        "query": "SELECT Account_Sender FROM uc04_data.results",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "100423459",
          "value": "100423459"
        },
        "datasource": {
          "type": "mysql",
          "uid": "Av4SrO24z"
        },
        "definition": "SELECT ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID FROM uc04_data.results WHERE ATM_Trx_ID != \"\" AND Mobile_Trx_ID != \"\" AND IBank_Trx_ID != \"\"",
        "hide": 0,
        "includeAll": true,
        "label": "Transaction ID",
        "multi": true,
        "name": "Filter_TransactionID",
        "options": [],
        "query": "SELECT ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID FROM uc04_data.results WHERE ATM_Trx_ID != \"\" AND Mobile_Trx_ID != \"\" AND IBank_Trx_ID != \"\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "UC04_Multichannel_Fraud1_Details",
  "uid": "oWvtV0hVz",
  "version": 194,
  "weekStart": ""
}