{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 3,
        "w": 1,
        "x": 0,
        "y": 0
      },
      "id": 58,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<a href=\"http://172.16.11.222:3000/d/2tQSaThVz/uc04_multichannel_fraud1?orgId=1&from=1673575290146&to=1673596890146\">\n<img src=\"https://raw.githubusercontent.com/tania21ciu/Web_Image/main/back.png\" style=\"width:60px;height:60px;\">\n</a>",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.2",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {},
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T03:02:05.215Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"xm6qO3B9qLjCL0uGYz1X\" version=\"20.8.3\" type=\"embed\"><diagram id=\"9iFmse4Kr2XzyWF2zgJO\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_36",
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 1,
        "y": 0
      },
      "id": 36,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "naFi7qtVk"
      },
      "gridPos": {
        "h": 3,
        "w": 21,
        "x": 3,
        "y": 0
      },
      "id": 42,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"margin-top:20px\">\n<h1 style=\"text-align:left;margin-bottom:0.5em;font-weight:bold; font-family:sans-serif; color:white\"> Details</h1>\n<hr style=\"height:2px;background-color:gray; text-align:right;\">\n</div>",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.2",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 7,
        "y": 3
      },
      "id": 20,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let atm_amounts = []\nlet mob_amounts = []\nlet ibank_amounts = []\n\ndata.series.map((s) => {\n  atm_amounts = s.fields.find((f) => f.name === 'ATM_Trx_Amount (sum)').values.buffer\n  mob_amounts = s.fields.find((f) => f.name === 'Mobile_Trx_Amount (sum)').values.buffer\n  ibank_amounts = s.fields.find((f) => f.name === 'IBank_Trx_Amount (sum)').values.buffer\n})\n\nreturn {\n  backgroundColor: \"#111217\",\n  tooltip: {\n    trigger: 'item'\n  },\n  legend: {\n    orient: 'vertical',\n    right: 30,\n    top: 20,\n    bottom: 20,\n    data: [\n      'ATM',\n      'Mobile App',\n      'Netbanking'\n    ]\n  },\n  toolbox: {\n    show: true,\n    feature: {\n      mark: { show: true },\n      dataView: { show: true, readOnly: false },\n      restore: { show: true },\n      saveAsImage: { show: true }\n    }\n  },\n  series: [\n    {\n      name: 'Channel',\n      type: 'pie',\n      radius: [15, 100],\n      center: ['40%', '50%'],\n      roseType: 'area',\n      itemStyle: {\n        borderRadius: 5\n      },\n      label: {\n        formatter: '{b|{b}} {per|({d}%)}',\n        rich: {\n          b: {\n            color: '#ffffff',\n            fontSize: 12,\n            fontWeight: 'bold'\n          },\n          per: {\n            color: '#ffffff',\n            fontSize: 12\n          }\n        }\n      },\n      data: [\n        { value: atm_amounts, name: 'ATM' },\n        { value: mob_amounts, name: 'Mobile App' },\n        { value: ibank_amounts, name: 'Netbanking' }\n      ]\n    }\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID, ATM_Trx_Amount, Mobile_Trx_Amount, IBank_Trx_Amount FROM Grafana.UC04_Results\r\nWHERE  Account_Receiver IN ($Filter_Receiver) AND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Distribution of Transaction Amount by Channel",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "ATM_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Account_Receiver": {
                "aggregations": [],
                "operation": "groupby"
              },
              "IBank_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Mobile_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#77000e",
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyIDR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 3
      },
      "id": 12,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, ATM_Trx_Amount, Mobile_Trx_Amount, IBank_Trx_Amount FROM Grafana.UC04_Results \r\nWHERE Account_Receiver IN ($Filter_Receiver)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Total Transaction Amount",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "ATM_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Account_Receiver": {
                "aggregations": [],
                "operation": "groupby"
              },
              "IBank_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              },
              "Mobile_Trx_Amount": {
                "aggregations": [
                  "sum"
                ],
                "operation": "aggregate"
              }
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Total Transaction Amount ",
            "mode": "reduceRow",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "ATM_Trx_Amount (sum)": true,
              "Account_Receiver": true,
              "IBank_Trx_Amount (sum)": true,
              "Mobile_Trx_Amount (sum)": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 17,
        "w": 7,
        "x": 0,
        "y": 4
      },
      "id": 10,
      "options": {
        "content": "<center>\r\n<div style=\"text-align:center; font-family:sans-serif; display:table-cell; vertical-align:middle; border: 3px solid white; padding-top: 50px; padding-bottom:50px; padding-left:30px; padding-right:30px; border-radius:20px\">\r\n  {{#if (eq Gender \"Female\")}}\r\n  <img src=\"https://raw.githubusercontent.com/tania21ciu/Web_Image/main/woman%20(1).png\"\r\n    width=\"180\" height=\"180\" style=\"border-radius:50%;\"></img>\r\n  {{/if}}\r\n  {{#if (eq Gender \"Male\")}}\r\n  <img src=\"https://raw.githubusercontent.com/tania21ciu/Web_Image/main/man%20(3).png\"\r\n    width=\"180\" height=\"180\" style=\"border-radius:50%;\"></img>\r\n  {{/if}}\r\n  {{#if (eq Gender \"No Data\")}}\r\n  <img src=\"https://raw.githubusercontent.com/tania21ciu/Web_Image/main/man.png\"\r\n    width=\"180\" height=\"180\" style=\"border-radius:50%;\"></img>\r\n  {{/if}}\r\n\r\n  <h2 style=\"margin:20px; color:white\">{{Full_Name}}</h2>\r\n  <h5 style=\"color:white\"> Born in {{Date_of_Birth}} |\r\n    <i class=\"fa fa-envelope\"><a style=\"font-family:sans-serif; color:white\"> {{Email_Address}}</p></i>\r\n  </h5>\r\n  <hr style=\"margin: 1rem; height:2px;border-width:0;color:gray;background-color:#caf0f8\">\r\n  <table style=\"margin:20px; border:none;\" width=\"93.5%\">\r\n    <tbody>\r\n      <tr>\r\n        <td\r\n          style=\"color:white; border:10px green; padding:8px 15px 8px 15px; text-align:center; border-radius: 50px; box-shadow: 3px 3px 3px #00b4d8;\">\r\n          <h6>Account ID<br>\r\n            <hr style=\"height:1px; background-color:white;\">{{Account_ID}}\r\n        </td>\r\n        <td\r\n          style=\"color:white; border:none; padding:8px 15px 8px 15px; text-align:center; border-radius: 50px; box-shadow: 3px 3px 3px #90e0ef;\">\r\n          <h6> Customer ID <br>\r\n            <hr style=\"height:1px; background-color:white;\">{{Customer_ID}}\r\n        </td>\r\n        <td\r\n          style=\"color:white; border:none; padding:8px 15px 8px 15px; text-align:center; border-radius: 50px; box-shadow: 3px 3px 3px #caf0f8;\">\r\n          <h6>KTP ID <br>\r\n            <hr style=\"height:1px; background-color:white;\">{{KTP_ID}}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n</center>",
        "defaultContent": "",
        "editor": {
          "format": "auto",
          "height": 400,
          "language": "markdown"
        },
        "everyRow": true
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT * FROM Grafana.UC04_Account_Details WHERE Account_ID IN ($Filter_Receiver)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "*",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "account_details",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Account Receiver Details",
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#980012",
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 6
      },
      "id": 32,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "/^Total$/",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, COUNT(IBank_Trx_ID) FROM Grafana.UC04_Results \r\nWHERE Account_Receiver IN ($Filter_Receiver) AND IBank_Trx_ID != \"\" AND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "ATM_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "IBank_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "Mobile_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        },
        {
          "datasource": {
            "type": "mysql",
            "uid": "KAFtEbhVz"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, COUNT(ATM_Trx_ID) FROM Grafana.UC04_Results \r\nWHERE Account_Receiver IN ($Filter_Receiver) AND ATM_Trx_ID != \"\" AND Account_Sender IN ($Filter_Sender)",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "mysql",
            "uid": "KAFtEbhVz"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, COUNT(Mobile_Trx_ID) FROM Grafana.UC04_Results \r\nWHERE Account_Receiver IN ($Filter_Receiver) AND Mobile_Trx_ID != \"\" AND Account_Sender IN ($Filter_Sender)",
          "refId": "C",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Total Transaction Frequency",
      "transformations": [
        {
          "id": "concatenate",
          "options": {
            "frameNameLabel": "frame",
            "frameNameMode": "field"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "COUNT(ATM_Trx_ID)",
                "COUNT(Mobile_Trx_ID)",
                "COUNT(IBank_Trx_ID)"
              ],
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Account_Receiver 1": true,
              "Account_Receiver 2": true,
              "Account_Receiver 3": true,
              "COUNT(DISTINCT(ATM_Trx_ID))": true,
              "COUNT(DISTINCT(IBank_Trx_ID))": true,
              "COUNT(DISTINCT(Mobile_Trx_ID))": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#c40017",
            "mode": "fixed"
          },
          "links": [
            {
              "title": "detail sender",
              "url": "http://localhost:3000/d/oWvtV0hVz/uc04_multichannel_fraud1_details?orgId=1&var-Filter_Receiver=DCA111103&from=1673341136118&to=1673362736118&var-Filter_Sender=All&var-Filter_TransactionID=All&viewPanel=50"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 9
      },
      "id": 30,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, COUNT(DISTINCT(Account_Sender)) FROM Grafana.UC04_Results  \r\nWHERE Account_Receiver IN ($Filter_Receiver) AND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Total Sender Account",
      "transformations": [],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Total_Transaction"
            },
            "properties": [
              {
                "id": "unit",
                "value": "locale"
              },
              {
                "id": "custom.displayMode",
                "value": "basic"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 13
      },
      "id": 22,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Total_Transaction"
          }
        ]
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Anomaly_Datetime, Account_Receiver, Account_Sender, ATM_Trx_ID, ATM_Trx_Amount, Mobile_Trx_ID, Mobile_Trx_Amount, IBank_Trx_ID, IBank_Trx_Amount FROM Grafana.UC04_Results \r\nWHERE Account_Receiver IN ($Filter_Receiver) AND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Anomaly_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Total_Transaction",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Multi-Channel Transaction Conducted By Receiver",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "Total_Transaction",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "ATM_Trx_Amount",
                "IBank_Trx_Amount",
                "Mobile_Trx_Amount"
              ],
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "ATM_Trx_Amount": true,
              "IBank_Trx_Amount": true,
              "Mobile_Trx_Amount": true
            },
            "indexByName": {},
            "renameByName": {
              "ATM_Trx_ID": "ATM Transaction ID",
              "Account_Receiver": "Account Receiver",
              "Account_Sender": "Account Sender",
              "Anomaly_Datetime": "Anomaly Datetime",
              "IBank_Trx_ID": "Netbanking Transaction ID",
              "Mobile_Trx_ID": "Mobile Transaction ID",
              "Total_Transaction": "Total Transaction (Rp)"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 50,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT DISTINCT(Grafana.UC04_Account_Details.Account_ID), Grafana.UC04_Account_Details.Customer_ID, Grafana.UC04_Account_Details.KTP_ID, Grafana.UC04_Account_Details.Full_Name, Grafana.UC04_Account_Details.Date_of_Birth, Grafana.UC04_Account_Details.Gender, Grafana.UC04_Account_Details.Email_Address FROM Grafana.UC04_Account_Details\r\nINNER JOIN Grafana.UC04_Results ON Grafana.UC04_Account_Details.Account_ID=Grafana.UC04_Results.Account_Sender\r\nWHERE Grafana.UC04_Account_Details.Account_ID IN ($Filter_Sender) AND Grafana.UC04_Results.Account_Receiver IN ($Filter_Receiver);",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Customer_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "KTP_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Full_Name",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Date_of_Birth",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Gender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Email_Address",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "account_details",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Detail Account Sender",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "Account_ID": "Account ID",
              "Customer_ID": "Customer ID",
              "Date_of_Birth": "Date of Birth",
              "Email_Address": "Email Address",
              "Full_Name": "Full Name",
              "Gender": "Gender",
              "KTP_ID": "KTP ID"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 26
      },
      "id": 52,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"border: 3px solid #7CFFB2; text-align:center; border-radius:10px; margin-top:30px\">\n<h3 style=\"margin-top:10px; font-family:sans-serif; color:white; font-weight:bold\">ATM Channel</h1>\n</div>",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.2",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {},
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T09:22:48.185Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"C83doJHCqWmH3KRBFP5N\" version=\"20.8.3\" type=\"embed\"><diagram id=\"VcluPDKnhoNfNNdJ9F82\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_40",
      "gridPos": {
        "h": 9,
        "w": 3,
        "x": 0,
        "y": 29
      },
      "id": 40,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 9,
        "w": 8,
        "x": 3,
        "y": 29
      },
      "id": 24,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let atm_amounts = []\nlet atm_datetime = []\nlet ibank_amounts = []\n\ndata.series.map((s) => {\n  atm_amounts = s.fields.find((f) => f.name === 'ATM_Trx_Amount (mean)').values.buffer\n  atm_datetime = s.fields.find((f) => f.name === 'ATM_Trx_Datetime').values.buffer\n})\n\n\nreturn {\n  backgroundColor: \"#111217\",\n  color: ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['ATM Transaction Amount']\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: atm_datetime\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'ATM Transaction Amount',\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(128, 255, 165)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(1, 191, 236)'\n          }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: atm_amounts\n    },\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT ATM_Trx_Datetime, ATM_Trx_Amount FROM Grafana.UC04_Results WHERE ATM_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver)\r\nAND Account_Sender IN ($Filter_Sender) ",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Average ATM Transaction Amount over Time",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "ATM_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "ATM_Trx_Amount": {
                "aggregations": [
                  "mean"
                ],
                "operation": "aggregate"
              },
              "ATM_Trx_Datetime": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "ATM_Trx_Amount"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "lcd-gauge"
              },
              {
                "id": "unit",
                "value": "locale"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ATM_Trx_Datetime"
            },
            "properties": [
              {
                "id": "custom.width"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 13,
        "x": 11,
        "y": 29
      },
      "id": 2,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "ATM_Trx_Amount"
          }
        ]
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, Account_Sender, ATM_Trx_ID, ATM_Trx_Datetime, ATM_Trx_Amount FROM Grafana.UC04_Results WHERE ATM_Trx_Amount > 0 AND  Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50,
            "whereJsonTree": {
              "children1": [],
              "id": "b89bbb99-89ab-4cde-b012-31859adf0a1c",
              "type": "group"
            }
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Details of ATM Transaction",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "ATM_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "ATM_Trx_Amount": "ATM Trx Amount (Rp)",
              "ATM_Trx_Datetime": "ATM Trx Datetime",
              "ATM_Trx_ID": "ATM Trx ID",
              "Account_Receiver": "Account Receiver",
              "Account_Sender": "Account Sender"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 38
      },
      "id": 54,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"border: 3px solid #66B2FF; text-align:center; border-radius:10px; margin-top:30px\">\n<h3 style=\"margin-top:10px; font-family:sans-serif; color:white; font-weight:bold\">Mobile Channel</h1>\n</div>",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.2",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {},
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T08:38:13.813Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"v0qrEcTK_j6wok7q5DJo\" version=\"20.8.3\" type=\"embed\"><diagram id=\"YeM2FD98rJKu4zMoST-6\" name=\"Page-1\">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</diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_34",
      "gridPos": {
        "h": 8,
        "w": 3,
        "x": 0,
        "y": 41
      },
      "id": 34,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "table",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 3,
        "y": 41
      },
      "id": 26,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let mobile_amounts = []\nlet mobile_datetime = []\n\ndata.series.map((s) => {\n  mobile_amounts = s.fields.find((f) => f.name === 'Mobile_Trx_Amount (mean)').values.buffer\n  mobile_datetime = s.fields.find((f) => f.name === 'Mobile_Trx_Datetime').values.buffer\n})\n\n\nreturn {\n  backgroundColor: \"#111217\",\n  color: ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['Mobile Transaction Amount']\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: mobile_datetime\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Mobile Transaction Amount',\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(128, 255, 165)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(34,139,34)'\n          }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: mobile_amounts\n    },\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Mobile_Trx_Datetime, Mobile_Trx_Amount FROM Grafana.UC04_Results WHERE Mobile_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver)\r\nAND Account_Sender IN ($Filter_Sender) ",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "ATM_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Average Mobile Transaction Amount over Time",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "field": "Mobile_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "Mobile_Trx_Amount": {
                "aggregations": [
                  "mean"
                ],
                "operation": "aggregate"
              },
              "Mobile_Trx_Datetime": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Mobile_Trx_Amount"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "lcd-gauge"
              },
              {
                "id": "unit",
                "value": "locale"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 13,
        "x": 11,
        "y": 41
      },
      "id": 4,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Mobile_Trx_Amount"
          }
        ]
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, Account_Sender, Mobile_Trx_ID, Mobile_Trx_Datetime, Mobile_Trx_Amount FROM Grafana.UC04_Results WHERE Mobile_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Mobile_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Details of Mobile Transaction",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "Mobile_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "Account_Receiver": "Account Receiver",
              "Account_Sender": "Account Sender",
              "Mobile_Trx_Amount": "Mobile Trx Amount (Rp)",
              "Mobile_Trx_Datetime": "Mobile Trx Datetime",
              "Mobile_Trx_ID": "Mobile Trx ID"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 49
      },
      "id": 56,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"border: 3px solid #FDDD60; text-align:center; border-radius:10px; margin-top:30px\">\n<h3 style=\"margin-top:10px; font-family:sans-serif; color:white; font-weight:bold\">Netbanking Channel</h1>\n</div>",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.2",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {},
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"app.diagrams.net\" modified=\"2023-01-11T08:38:44.985Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\" etag=\"lp6xh0hrj54wqo4SBWK7\" version=\"20.8.3\" type=\"embed\"><diagram id=\"6A3sm9AgLKuXU-aac3R4\" name=\"Page-1\"></diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_38",
      "gridPos": {
        "h": 9,
        "w": 3,
        "x": 0,
        "y": 52
      },
      "id": 38,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "myRule",
            "colors": [
              "rgba(245, 54, 54, 0.9)",
              "rgba(237, 129, 40, 0.89)",
              "rgba(50, 172, 45, 0.97)"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": false,
            "hidden": false,
            "invert": false,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 1,
            "overlayIcon": false,
            "pattern": ".*",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              50,
              80
            ],
            "tooltip": false,
            "tooltipColors": false,
            "tooltipLabel": "",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": false,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "short",
            "valueData": []
          }
        ]
      },
      "transparent": true,
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 3,
        "y": 52
      },
      "id": 28,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let ibank_datetime = []\nlet ibank_amounts = []\n\ndata.series.map((s) => {\n  ibank_amounts = s.fields.find((f) => f.name === 'IBank_Trx_Amount (mean)').values.buffer\n  ibank_datetime = s.fields.find((f) => f.name === 'IBank_Trx_Datetime').values.buffer\n})\n\n\nreturn {\n  backgroundColor: \"#111217\",\n  color: ['#FFBF00'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    }\n  },\n  legend: {\n    data: ['Netbanking Transaction Amount']\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [\n    {\n      type: 'category',\n      boundaryGap: false,\n      data: ibank_datetime\n    }\n  ],\n  yAxis: [\n    {\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Internet Banking Transaction Amount',\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: 'rgb(255,255,204)'\n          },\n          {\n            offset: 1,\n            color: 'rgb(255, 191, 0)'\n          }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: ibank_amounts\n    },\n  ]\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas"
      },
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT IBank_Trx_Datetime, IBank_Trx_Amount FROM Grafana.UC04_Results WHERE IBank_Trx_Amount > 0 AND Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender) ",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Average Netbanking Transaction Amount over Time",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "field": "IBank_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "IBank_Trx_Amount": {
                "aggregations": [
                  "mean"
                ],
                "operation": "aggregate"
              },
              "IBank_Trx_Datetime": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "KAFtEbhVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "align": "left",
            "displayMode": "auto",
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "IBank_Trx_Amount"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "lcd-gauge"
              },
              {
                "id": "unit",
                "value": "locale"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 13,
        "x": 11,
        "y": 52
      },
      "id": 6,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.3.2",
      "targets": [
        {
          "columns": [],
          "dataset": "uc04_data",
          "datasource": {
            "type": "mysql",
            "uid": "Av4SrO24z"
          },
          "editorMode": "code",
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "rawQuery": true,
          "rawSql": "SELECT Account_Receiver, Account_Sender, IBank_Trx_ID, IBank_Trx_Datetime, IBank_Trx_Amount FROM Grafana.UC04_Results WHERE IBank_Trx_Amount > 0 AND  Account_Receiver IN ($Filter_Receiver) \r\nAND Account_Sender IN ($Filter_Sender)",
          "refId": "A",
          "root_selector": "",
          "source": "url",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "Account_Receiver",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "Account_Sender",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_ID",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Datetime",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "IBank_Trx_Amount",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "results",
          "type": "json",
          "url": "https://github.com/yesoreyeram/grafana-infinity-datasource/blob/main/testdata/users.json",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "title": "Details of Netbanking Transaction",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "IBank_Trx_Datetime"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "Account_Receiver": "Account Receiver",
              "Account_Sender": "Account Sender",
              "IBank_Trx_Amount": "Netbanking Trx Amount (Rp)",
              "IBank_Trx_Datetime": "Netbanking Trx Datetime",
              "IBank_Trx_ID": "Netbanking Trx ID"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "DCA111103",
          "value": "DCA111103"
        },
        "datasource": {
          "type": "mysql",
          "uid": "KAFtEbhVz"
        },
        "definition": "SELECT Account_Receiver FROM Grafana.UC04_Results",
        "hide": 2,
        "includeAll": true,
        "label": "Account Receiver",
        "multi": true,
        "name": "Filter_Receiver",
        "options": [],
        "query": "SELECT Account_Receiver FROM Grafana.UC04_Results",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "DCA111109",
          "value": "DCA111109"
        },
        "datasource": {
          "type": "mysql",
          "uid": "KAFtEbhVz"
        },
        "definition": "SELECT Account_Sender FROM Grafana.UC04_Results",
        "hide": 0,
        "includeAll": true,
        "label": "Account Sender",
        "multi": true,
        "name": "Filter_Sender",
        "options": [],
        "query": "SELECT Account_Sender FROM Grafana.UC04_Results",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "100423459",
          "value": "100423459"
        },
        "datasource": {
          "type": "mysql",
          "uid": "KAFtEbhVz"
        },
        "definition": "SELECT ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID FROM Grafana.UC04_Results WHERE ATM_Trx_ID != \"\" AND Mobile_Trx_ID != \"\" AND IBank_Trx_ID != \"\"",
        "hide": 2,
        "includeAll": true,
        "label": "Transaction ID",
        "multi": true,
        "name": "Filter_TransactionID",
        "options": [],
        "query": "SELECT ATM_Trx_ID, Mobile_Trx_ID, IBank_Trx_ID FROM Grafana.UC04_Results WHERE ATM_Trx_ID != \"\" AND Mobile_Trx_ID != \"\" AND IBank_Trx_ID != \"\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "UC04_Multichannel_Fraud1_Details",
  "uid": "oWvtV0hVz",
  "version": 139,
  "weekStart": ""
}